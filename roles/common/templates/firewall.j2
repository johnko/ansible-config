#!/usr/bin/env bash

set -e

# iptables tables and default chains
#   filter    INPUT, FORWARD, OUTPUT
#   nat       PREROUTING, OUTPUT, POSTROUTING
#   mangle    PREROUTING, OUTPUT, INPUT, FORWARD, POSTROUTING
#   raw       PREROUTING, OUTPUT
#   security  INPUT, OUTPUT, FORWARD

# ip6tables tables and default chains
#   filter    INPUT, FORWARD, OUTPUT
#   mangle    PREROUTING, OUTPUT, INPUT, FORWARD, POSTROUTING
#   raw       PREROUTING, OUTPUT
#   security  INPUT, OUTPUT, FORWARD

function block
{
  local iptables="${1}"
  local localhost="${2}"

  echo -n "Loading '${iptables}' blocking rules..."

  # Be more picky about what we forward.
  ${iptables} --table filter --policy FORWARD DROP

  # Be more picky about what we allow.
  ${iptables} --table filter --policy INPUT DROP

  # Attempt to protect against SYN flooding.
  ${iptables} --table filter --append INPUT \
    --protocol tcp --syn --match limit \
    --limit 25/s --limit-burst 50 --jump ACCEPT

  # Accept a few pings.
  if [ "ip6tables" == ${iptables} ]; then
    ${iptables} --table filter --append INPUT \
      --protocol icmpv6 --match limit \
      --limit 4/s --limit-burst 8 --jump ACCEPT
  else
    ${iptables} --table filter --append INPUT \
      --protocol icmp --match limit \
      --limit 4/s --limit-burst 8 --jump ACCEPT
  fi

  # Accept existing connections.
  ${iptables} --table filter --append INPUT \
    --match state --state ESTABLISHED,RELATED --jump ACCEPT

  # Accept local connections.
  ${iptables} --table filter --append INPUT \
    --source ${localhost} --jump ACCEPT

{% if 'gateways' not in group_names %}
  # Accept ssh.
  ${iptables} --table filter --append INPUT \
    --protocol tcp --match tcp --dport 22 --jump ACCEPT

{% else %}
  # Accept ssh.
#  ${iptables} --table filter --append INPUT \
#    --protocol tcp --match tcp --dport 22 --jump ACCEPT

{% endif %}
  echo "DONE"
}

function forward
{
  local iptables="${1}"

  local wan="{{ wan_interface_name | default('ppp0') }}"  # on {{ wan_real_interface_name | default('eth1') }}
  local lan="{{ lan_interface_name | default('eth0') }}"
  local wifi="{{ wifi_interface_name | default('wlan0') }}"

  echo -n "Loading '${iptables}' forwarding rules..."

  # Honour MTU (http://lartc.org/howto/lartc.cookbook.mtu-mss.html).
  ${iptables} --table filter --append FORWARD \
    --protocol tcp --tcp-flags SYN,RST SYN --jump TCPMSS --clamp-mss-to-pmtu

  # Enable NAT.
  if [ "iptables" == ${iptables} ]; then
    ${iptables} --table nat --append POSTROUTING \
      --out-interface ${wan} --jump MASQUERADE
  fi

  # WIFI -> LAN.
  ${iptables} --table filter --append FORWARD \
    --in-interface ${wifi} --out-interface ${lan} --jump ACCEPT
  # LAN -> WIFI.
  ${iptables} --table filter --append FORWARD \
    --in-interface ${lan} --out-interface ${wifi} --jump ACCEPT

  # LAN -> WAN.
  ${iptables} --table filter --append FORWARD \
    --in-interface ${lan} --out-interface ${wan} --jump ACCEPT
  # WIFI -> WAN.
  ${iptables} --table filter --append FORWARD \
    --in-interface ${wifi} --out-interface ${wan} --jump ACCEPT

  # WAN -> LAN.
  ${iptables} --table filter --append FORWARD \
    --in-interface ${wan} --out-interface ${lan} --match state \
    --state ESTABLISHED,RELATED --jump ACCEPT
  # WAN -> WIFI.
  ${iptables} --table filter --append FORWARD \
    --in-interface ${wan} --out-interface ${wifi} --match state \
    --state ESTABLISHED,RELATED --jump ACCEPT

  # Accept connections from the LAN.
  ${iptables} --table filter --append INPUT \
    --in-interface ${lan} --jump ACCEPT
  # Accept connections over WIFI.
  ${iptables} --table filter --append INPUT \
    --in-interface ${wifi} --jump ACCEPT

  echo "DONE"
}

function load
{
  local iptables="${1}"
  local localhost="${2}"

  block ${iptables} ${localhost}
{% if 'gateways' in group_names %}
  forward ${iptables}
{% else %}
  #forward ${iptables}
{% endif %}
}

function flush
{
  local iptables="${1}"

  echo -n "Flushing '${iptables}' rules..."

  if [ "iptables" == ${iptables} ]; then
    ${iptables} --table nat --flush POSTROUTING
  fi

  ${iptables} --table filter --flush FORWARD
  ${iptables} --table filter --policy FORWARD DROP

  ${iptables} --table filter --flush INPUT
  ${iptables} --table filter --policy INPUT DROP

  echo "DONE"
}

case "${1}" in
  start|restart)
    flush iptables
    load iptables 127.0.0.1
    flush ip6tables
    load ip6tables ::1
    ;;

  stop)
    flush iptables
    flush ip6tables
    ;;

  *)
    echo "Usage:  start|stop|restart."
    ;;
esac

exit 0
